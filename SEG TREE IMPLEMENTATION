const int N= 1e5+5;

int t[4*N]; // t[x] stores sum in node x

// node v ->  2*v(left) and 2*v+1 (right)
// tl, tr -> node range
// id-> updating point
// val -> new value

void update ( int v , int tl , int tr , int id, int val){
	if(tl==id && tr==id){
		t[v]= val;
		return;
	}
	if(id>tr || id<tl){  // update point is outside node range
		return;
	}
	// here we are inside the node range somewhere
	int tm= (tl+tr)/2; // [tl,tm] and [tm+1,tr]
	update(2*v, tl, tm, id , val);
	update(2*v+1,tm+1,tr,id,val);
	t[v]=t[2*v]+ t[2*v+1];  // sum of left and right
}

// l, r -> query range
int query(int v, int tl , int tr, int l , int r){
	// no overlap
	if(tl>r || tr<l){
		return 0;
	}
	// fully within condition
	if(l<=tl && tr<=r){  // l....tl......tr....r
		return t[v]; // picking it fully
	}
	// partial overlap
	int tm= (tl+tr)/2; // [tl,tm] and [tm+1,tr]
	int ans=0;
	ans+= query(2*v,tl,tm,l,r);
	ans+= query(2*v+1,tm+1,tr,l,r);
	return ans;
}
